/* eslint-disable */
/* tslint:disable */
/*
 * ---------------------------------------------------------------
 * ## THIS FILE WAS GENERATED VIA SWAGGER-TYPESCRIPT-API        ##
 * ##                                                           ##
 * ## AUTHOR: acacode                                           ##
 * ## SOURCE: https://github.com/acacode/swagger-typescript-api ##
 * ---------------------------------------------------------------
 */

/**
 * Project object
 * database_name: Projekt
 */
export interface Project {
  /**
   * @format uuid
   * @maxLength 36
   * @example "123e4567-e89b-12d3-a456-426614174000"
   */
  id?: string;
  /**
   * @format uuid
   * @maxLength 36
   * @example "123e4567-e89b-12d3-a456-426614174000"
   */
  event_id?: string;
  /**
   * @maxLength 3
   * @example 1234
   */
  project_number?: string;
  /**
   * AN = Request (Anfrage)
   * AG = Offer (Angebot)
   * AF = Order (Auftrag)
   * OE = Open items (Offene Posten)
   * AU = Completed (Abgeschlossen)
   * XX = Canceled (Storniert)
   * @format enum
   * @maxLength 2
   * @maxItems 1
   * @example "in progress"
   */
  status?: "AN" | "AG" | "AF" | "OE" | "AU" | "XX";
  /**
   * @format date
   * @example "2020-01-01T00:00:00.000Z"
   */
  af_date?: string | null;
  /**
   * @format date
   * @example "2020-01-01T00:00:00.000Z"
   */
  ag_date?: string | null;
  /**
   * @format date
   * @example "2020-01-01T00:00:00.000Z"
   */
  au_date?: string | null;
  /**
   * @format uuid
   * @maxLength 36
   * @example "123e4567-e89b-12d3-a456-426614174000"
   */
  customer_id?: string;
  /**
   * @format uuid
   * @maxLength 36
   * @example "123e4567-e89b-12d3-a456-426614174000"
   */
  costunit_id?: string;
  /**
   * @maxLength 60
   * @example "Test Project"
   */
  title?: string;
  /**
   * This field can be pretty long as it is a "clob" in the database
   * @example "Test Project"
   */
  description?: string;
  /**
   * @format float
   * @example 1234.56
   */
  area?: number;
  /**
   * @format float
   * @example 1234.56
   */
  depth?: number;
  /**
   * @maxLength 4
   * @example 1234
   */
  hall_number?: string;
  /**
   * @format float
   * @example 1234.56
   */
  width?: number;
  /**
   * @maxLength 10
   * @example 1234
   */
  booth_number?: string;
  /**
   * KOPF = Head-booth (Kopfstand)
   * REIHE = Row-booth (Reihenstand)
   * ZELT = Tent-booth (Zeltstand)
   * BLOCK = Block-booth (Blockstand)
   * KEINE = not specified (keine Angabe)
   * ECK = Corner-booth (Eckstand)
   * PARTN = Partner-booth (Partnerstand)
   * @format enum
   * @maxLength 5
   * @example "KOPF"
   */
  booth_type?: "KOPF" | "REIHE" | "ZELT" | "BLOCK" | "KEINE" | "ECK" | "PARTN";
  /**
   * @format date-time
   * @example "2020-01-01T00:00:00.000Z"
   */
  created_at?: string;
  /**
   * @format date-time
   * @example "2020-01-01T00:00:00.000Z"
   */
  updated_at?: string;
}

/**
 * Customer object
 * database_name: Kunde
 */
export interface Customer {
  /**
   * @format uuid
   * @maxLength 36
   * @example "123e4567-e89b-12d3-a456-426614174000"
   */
  id?: string;
  name?: {
    /**
     * database_name: Bez
     * @maxLength 15
     * @example "BACCUS"
     */
    short_name?: string;
    /**
     * database_name: Anrede
     * @maxLength 30
     * @example "Baccus Weinhaus"
     */
    name0?: string | null;
    /**
     * @maxLength 45
     * @example "Graf Eltz GmbH"
     */
    name1?: string | null;
    /**
     * @maxLength 45
     * @example "Schlo√ü Reinhartshausen"
     */
    name2?: string | null;
  };
  /**
   * Location object
   * database_info: this doesnt exist in that way. could be generated by the api at runtime until impl in database is possible.
   */
  location?: Location;
  contacts?: Contact[];
  products?: string[];
  /** @example "idk //TODO" */
  sales?: string;
  /**
   * @format date-time
   * @example "2020-01-01T00:00:00.000Z"
   */
  created_at?: string;
  /**
   * @format date-time
   * @example "2020-01-01T00:00:00.000Z"
   */
  updated_at?: string;
}

/**
 * Location object
 * database_info: this doesnt exist in that way. could be generated by the api at runtime until impl in database is possible.
 */
export interface Location {
  /**
   * @deprecated
   * @format uuid
   * @maxLength 36
   * @example "123e4567-e89b-12d3-a456-426614174000"
   */
  id?: string;
  /**
   * @format enum
   * @example "customer"
   */
  type?: "customer" | "site" | "exhibition";
  /** @example "Test Location" */
  title?: string;
  /**
   * @maxLength 45
   * @example "Test Street"
   */
  street?: string;
  /**
   * @maxLength 6
   * @example 12345
   */
  zip?: string;
  /**
   * @maxLength 45
   * @example "Test City"
   */
  city?: string;
  /**
   * @maxLength 45
   * @example "Test Country"
   */
  country?: string;
  /**
   * @format date-time
   * @example "2020-01-01T00:00:00.000Z"
   */
  created_at?: string;
  /**
   * @format date-time
   * @example "2020-01-01T00:00:00.000Z"
   */
  updated_at?: string;
}

/**
 * Represents a contact for a person or a site.
 * database_info: this doesnt exist in that way. could be generated by the api at runtime until impl in database is possible.
 */
export interface Contact {
  /**
   * @deprecated
   * @format uuid
   * @example "123e4567-e89b-12d3-a456-426614174000"
   */
  id?: string;
  /**
   * @format enum
   * @example "person"
   */
  type?: "person" | "site";
  /**
   * @maxLength 45
   * @example "John Doe"
   */
  name?: string;
  /**
   * @maxLength 30
   * @example "+49-1234-567890"
   */
  phone?: string;
  /**
   * @maxLength 30
   * @example "+49-1234-567890"
   */
  fax?: string;
  /**
   * @maxLength 30
   * @example 12345
   */
  postbox?: string;
  /**
   * @maxLength 60
   * @example "john.doe@cars.com"
   */
  email?: string;
}

/**
 * Event object
 * database_name: Messe
 */
export interface Event {
  /**
   * @format uuid
   * @maxLength 36
   * @example "123e4567-e89b-12d3-a456-426614174000"
   */
  id?: string;
  /**
   * @maxLength 5
   * @example 12345
   */
  event_id?: string;
  /**
   * @maxLength 30
   * @example "Test Event"
   */
  title?: string;
  /**
   * @format uuid
   * @maxLength 36
   * @example "123e4567-e89b-12d3-a456-426614174000"
   */
  customer_id?: string;
  /**
   * Location object
   * database_info: this doesnt exist in that way. could be generated by the api at runtime until impl in database is possible.
   */
  location?: Location;
  /**
   * @format int32
   * @example 1
   */
  revision?: number;
  /**
   * @format date-time
   * @example "2020-01-01T00:00:00.000Z"
   */
  start_date?: string;
  /**
   * @format date-time
   * @example "2020-01-01T00:00:00.000Z"
   */
  end_date?: string;
  cancel_state?: {
    /** @example true */
    canceled?: boolean;
    /**
     * @format date-time
     * @example "2020-01-01T00:00:00.000Z"
     */
    canceled_at?: string;
    /** @example "Test Reason" */
    reason?: string;
    /**
     * @format uuid
     * @maxLength 36
     * @example "123e4567-e89b-12d3-a456-426614174000"
     */
    alternative_event_id?: string;
  } | null;
  /**
   * @format date-time
   * @example "2020-01-01T00:00:00.000Z"
   */
  created_at?: string;
  /**
   * @format date-time
   * @example "2020-01-01T00:00:00.000Z"
   */
  updated_at?: string;
}

export interface Item {
  /**
   * @format int64
   * @example 1
   */
  id?: number;
  /** @example "Test Item" */
  title?: string;
  /**
   * @deprecated
   * @example ["url1","url2"]
   */
  photoUrls?: string[] | null;
}

export interface Meta {
  pagination?: {
    /**
     * Total number of items available
     * @format int32
     * @example 1
     */
    total?: number;
    /**
     * Number of items returned
     * @format int32
     * @example 1
     */
    count?: number;
    /**
     * Number of items per page
     * @format int32
     * @example 1
     */
    per_page?: number;
    /**
     * Current page
     * @format int32
     * @example 1
     */
    current_page?: number;
    /**
     * Total number of pages
     * @format int32
     * @example 1
     */
    total_pages?: number;
    links?: {
      /** @example "http://example.com/api/v1/projects?page=1" */
      previous?: string;
      /** @example "http://example.com/api/v1/projects?page=3" */
      next?: string;
    };
  };
}

export interface StringFilter {
  /**
   * @format enum
   * @example "contains"
   */
  type?: "contains" | "starts_with" | "ends_with" | "equals" | "like";
  /** @example "Test" */
  value?: string;
}

export interface DateFilter {
  /** @format enum */
  type?: "before" | "after" | "between";
  date?: string[];
}

export namespace Projects {
  /**
   * @description Returns all projects. This endpoint is paginated.
   * @tags project
   * @name GetProjects
   * @summary Get all projects
   * @request GET:/projects
   * @secure
   */
  export namespace GetProjects {
    export type RequestParams = {};
    export type RequestQuery = {
      /**
       * The page number to return.
       * Defaults to 1.
       * @format int32
       * @min 1
       * @default 1
       */
      page?: string;
      /**
       * The number of items to return per page.
       * Defaults to 10.
       * @format int32
       * @min 1
       * @max 100
       * @default 10
       */
      limit?: string;
      /**
       * The field to sort by.
       * Defaults to id.
       */
      sort?: {
        /**
         * @default ["id"]
         * @example "id"
         */
        field?:
          | "id"
          | "event_id"
          | "project_number"
          | "status"
          | "af_date"
          | "ag_date"
          | "au_date"
          | "customer_id"
          | "costunit_id"
          | "title"
          | "description"
          | "area"
          | "depth"
          | "hall_number"
          | "width"
          | "booth_number"
          | "booth_type"
          | "created_at"
          | "updated_at";
        /** @example "asc" */
        order?: "asc" | "desc";
      };
      filter?: {
        /**
         * @format uuid
         * @example "123e4567-e89b-12d3-a456-426614174000"
         */
        event_id?: string;
        /** @example 1234 */
        project_number?: string;
        status?: ("AN" | "AG" | "AF" | "OE" | "AU" | "XX")[];
        af_date?: DateFilter;
        ag_date?: DateFilter;
        au_date?: DateFilter;
        /**
         * @format uuid
         * @example "123e4567-e89b-12d3-a456-426614174000"
         */
        customer_id?: string;
        /**
         * @format uuid
         * @example "123e4567-e89b-12d3-a456-426614174000"
         */
        costunit_id?: string;
        title?: StringFilter;
        description?: StringFilter;
        booth_number?: StringFilter;
        created_at?: DateFilter;
        updated_at?: DateFilter;
      };
    };
    export type RequestBody = never;
    export type RequestHeaders = {};
    export type ResponseBody = {
      data?: Project[];
      meta?: Meta;
    };
  }
  /**
   * @description Creates a project.
   * @tags project
   * @name CreateProject
   * @summary Create a project
   * @request POST:/projects
   * @secure
   */
  export namespace CreateProject {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = Project;
    export type RequestHeaders = {};
    export type ResponseBody = Project;
  }
  /**
   * @description Returns a project.
   * @tags project
   * @name GetProject
   * @summary Get a project
   * @request GET:/projects/{id}
   * @secure
   */
  export namespace GetProject {
    export type RequestParams = {
      /**
       * The id of the item to retrieve.
       * @format uuid
       */
      id: string;
    };
    export type RequestQuery = {};
    export type RequestBody = never;
    export type RequestHeaders = {};
    export type ResponseBody = Project;
  }
  /**
   * @description Updates a project.
   * @tags project
   * @name UpdateProject
   * @summary Update a project
   * @request PUT:/projects/{id}
   * @secure
   */
  export namespace UpdateProject {
    export type RequestParams = {
      /**
       * The id of the item to retrieve.
       * @format uuid
       */
      id: string;
    };
    export type RequestQuery = {};
    export type RequestBody = Project;
    export type RequestHeaders = {};
    export type ResponseBody = Project;
  }
  /**
   * @description Deletes a project.
   * @tags project
   * @name DeleteProject
   * @summary Delete a project
   * @request DELETE:/projects/{id}
   * @secure
   */
  export namespace DeleteProject {
    export type RequestParams = {
      /**
       * The id of the item to retrieve.
       * @format uuid
       */
      id: string;
    };
    export type RequestQuery = {};
    export type RequestBody = never;
    export type RequestHeaders = {};
    export type ResponseBody = void;
  }
}

export namespace Customers {
  /**
   * @description Returns a list of customers.
   * @tags customer
   * @name GetCustomers
   * @summary Get customers
   * @request GET:/customers
   * @secure
   */
  export namespace GetCustomers {
    export type RequestParams = {};
    export type RequestQuery = {
      /**
       * The number of items to return per page.
       * Defaults to 10.
       * @format int32
       * @min 1
       * @max 100
       * @default 10
       */
      limit?: string;
      /**
       * The page number to return.
       * Defaults to 1.
       * @format int32
       * @min 1
       * @default 1
       */
      page?: string;
      sort?: {
        /** @example "name" */
        field?: "name.short_name" | "name.name0" | "name.name1" | "name.name2" | "created_at" | "updated_at";
        /** @example "asc" */
        order?: "asc" | "desc";
      };
      filter?: {
        name?: StringFilter;
        created_at?: DateFilter;
        updated_at?: DateFilter;
      };
    };
    export type RequestBody = never;
    export type RequestHeaders = {};
    export type ResponseBody = {
      data?: Customer[];
      meta?: Meta;
    };
  }
  /**
   * @description Creates a customer.
   * @tags customer
   * @name CreateCustomer
   * @summary Create a customer
   * @request POST:/customers
   * @secure
   */
  export namespace CreateCustomer {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = Customer;
    export type RequestHeaders = {};
    export type ResponseBody = Customer;
  }
  /**
   * @description Returns a customer.
   * @tags customer
   * @name GetCustomer
   * @summary Get a customer
   * @request GET:/customers/{id}
   * @secure
   */
  export namespace GetCustomer {
    export type RequestParams = {
      /**
       * The id of the item to retrieve.
       * @format uuid
       */
      id: string;
    };
    export type RequestQuery = {};
    export type RequestBody = never;
    export type RequestHeaders = {};
    export type ResponseBody = Customer;
  }
  /**
   * @description Updates a customer.
   * @tags customer
   * @name UpdateCustomer
   * @summary Update a customer
   * @request PUT:/customers/{id}
   * @secure
   */
  export namespace UpdateCustomer {
    export type RequestParams = {
      /**
       * The id of the item to retrieve.
       * @format uuid
       */
      id: string;
    };
    export type RequestQuery = {};
    export type RequestBody = Customer;
    export type RequestHeaders = {};
    export type ResponseBody = Customer;
  }
  /**
   * @description Deletes a customer.
   * @tags customer
   * @name DeleteCustomer
   * @summary Delete a customer
   * @request DELETE:/customers/{id}
   * @secure
   */
  export namespace DeleteCustomer {
    export type RequestParams = {
      /**
       * The id of the item to retrieve.
       * @format uuid
       */
      id: string;
    };
    export type RequestQuery = {};
    export type RequestBody = never;
    export type RequestHeaders = {};
    export type ResponseBody = void;
  }
}

export namespace Events {
  /**
   * @description Returns a list of events.
   * @tags event
   * @name GetEvents
   * @summary Get events
   * @request GET:/events
   * @secure
   */
  export namespace GetEvents {
    export type RequestParams = {};
    export type RequestQuery = {
      /**
       * The number of items to return per page.
       * Defaults to 10.
       * @format int32
       * @min 1
       * @max 100
       * @default 10
       */
      limit?: string;
      /**
       * The page number to return.
       * Defaults to 1.
       * @format int32
       * @min 1
       * @default 1
       */
      page?: string;
      sort?: {
        /** @example "name" */
        field?: "name.short_name" | "name.name0" | "name.name1" | "name.name2" | "created_at" | "updated_at";
        /** @example "asc" */
        order?: "asc" | "desc";
      };
      filter?: {
        name?: StringFilter;
        created_at?: DateFilter;
        updated_at?: DateFilter;
      };
    };
    export type RequestBody = never;
    export type RequestHeaders = {};
    export type ResponseBody = {
      data?: Event[];
      meta?: Meta;
    };
  }
  /**
   * @description Creates an event.
   * @tags event
   * @name CreateEvent
   * @summary Create an event
   * @request POST:/events
   * @secure
   */
  export namespace CreateEvent {
    export type RequestParams = {};
    export type RequestQuery = {};
    export type RequestBody = Event;
    export type RequestHeaders = {};
    export type ResponseBody = Event;
  }
  /**
   * @description Returns an event.
   * @tags event
   * @name GetEvent
   * @summary Get an event
   * @request GET:/events/{id}
   * @secure
   */
  export namespace GetEvent {
    export type RequestParams = {
      /**
       * The id of the item to retrieve.
       * @format uuid
       */
      id: string;
    };
    export type RequestQuery = {};
    export type RequestBody = never;
    export type RequestHeaders = {};
    export type ResponseBody = Event;
  }
  /**
   * @description Updates an event.
   * @tags event
   * @name UpdateEvent
   * @summary Update an event
   * @request PUT:/events/{id}
   * @secure
   */
  export namespace UpdateEvent {
    export type RequestParams = {
      /**
       * The id of the item to retrieve.
       * @format uuid
       */
      id: string;
    };
    export type RequestQuery = {};
    export type RequestBody = Event;
    export type RequestHeaders = {};
    export type ResponseBody = Event;
  }
  /**
   * @description Deletes an event.
   * @tags event
   * @name DeleteEvent
   * @summary Delete an event
   * @request DELETE:/events/{id}
   * @secure
   */
  export namespace DeleteEvent {
    export type RequestParams = {
      /**
       * The id of the item to retrieve.
       * @format uuid
       */
      id: string;
    };
    export type RequestQuery = {};
    export type RequestBody = never;
    export type RequestHeaders = {};
    export type ResponseBody = void;
  }
}
